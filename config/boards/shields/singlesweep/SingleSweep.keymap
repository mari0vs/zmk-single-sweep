// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

&sk {
    release-after-ms = <15000>;
};

/ {
    behaviors {
        lo: layer_mo {
            label = "layer_mo";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <250>;
            quick-tap-ms = <500>;
            bindings = <&mo>, <&kp>;
        };

        td_comma: tap_dance_comma {
            compatible = "zmk,behavior-tap-dance";
            label = "tap_dance_comma";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp COMMA>, <&kp SEMI>;
        };

        td_dot: tap_dance_dot {
            compatible = "zmk,behavior-tap-dance";
            label = "tap_dance_dot";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp DOT>, <&kp COLON>;
        };

        td_fslh: tap_dance_fslh {
            compatible = "zmk,behavior-tap-dance";
            label = "tap_dance_fslh";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp FSLH>, <&kp QMARK>;
        };

        td_sqt: tap_dance_sqt {
            compatible = "zmk,behavior-tap-dance";
            label = "tap_dance_sqt";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp SQT>, <&kp DQT>;
        };

        td_grave: tap_dance_grave {
            compatible = "zmk,behavior-tap-dance";
            label = "tap_dance_grave";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp GRAVE>, <&kp TILDE>;
        };

        td_minus: tap_dance_minus {
            compatible = "zmk,behavior-tap-dance";
            label = "tap_dance_minus";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp MINUS>, <&kp UNDER>;
        };

        td_equal: tap_dance_equal {
            compatible = "zmk,behavior-tap-dance";
            label = "tap_dance_equal";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp EQUAL>, <&kp PLUS>;
        };

        td_bslh: tap_dance_bslh {
            compatible = "zmk,behavior-tap-dance";
            label = "tap_dance_bslh";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp BSLH>, <&kp PIPE>;
        };

        td_brc: tap_dance_brc {
            compatible = "zmk,behavior-tap-dance";
            label = "tap_dance_brc";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp LBRC>, <&kp RBRC>;
        };

        td_bkt: tap_dance_bkt {
            compatible = "zmk,behavior-tap-dance";
            label = "tap_dance_bkt";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp LBKT>, <&kp RBKT>;
        };

        td_par: tap_dance_par {
            compatible = "zmk,behavior-tap-dance";
            label = "tap_dance_par";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp LPAR>, <&kp RPAR>;
        };

        td_rsbl: tap_dance_rsbl {
            compatible = "zmk,behavior-tap-dance";
            label = "tap_dance_rebl";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&reset>, <&bootloader>;
        };
    };

    combos {
        compatible = "zmk,combos";
//alpha
        combo_u {
            timeout-ms = <80>;
            layers = <0>;
            key-positions = <1 2>;
            bindings = <&kp U>;
        };

        combo_g {
            timeout-ms = <80>;
            layers = <0>;
            key-positions = <7 8>;
            bindings = <&kp G>;
        };
//
//control
        combo_del {
            timeout-ms = <60>;
            layers = <0>;
            key-positions = <4 16>;
            bindings = <&kp DEL>;
        };

        combo_caps {
            timeout-ms = <60>;
            layers = <0>;
            key-positions = <9 16>;
            bindings = <&kp CAPS>;
        };
//
    };

    keymap {
        compatible = "zmk,keymap";

        AL1_layer {
            bindings = <

            &kp Z       &kp Y       &kp F       &kp P       &kp TAB

            &kp A       &kp R       &kp S       &kp T       &kp BSPC

            &kp X       &kp C       &kp V       &kp D       &kp RET

                                                &mo 7       &lo 1 SPACE
            >;
        };

        AL2_layer {
            bindings = <

            &kp L       &kp K       &kp J       &kp H       &kp ESC

            &kp O       &kp I       &kp E       &kp N       &kp DEL

            &kp Q       &kp W       &kp M       &kp B       &kp CAPS

                                                &trans      &trans
            >;
        };

        NAV_layer {
            bindings = <

            &kp HOME    &kp PG_DN   &kp PG_UP   &kp END     &trans

            &kp LEFT    &kp DOWN    &kp UP      &kp RIGHT   &trans

            &kp INS     &none       &none       &kp PSCRN   &trans

                                                &trans      &trans
            >;
        };

        SYM_layer {
            bindings = <

            &td_grave   &td_bslh    &td_minus   &td_equal   &trans

            &td_fslh    &td_sqt     &td_comma   &td_dot     &trans

            &none       &td_brc     &td_bkt     &td_par     &trans

                                                &trans      &trans
            >;
        };

        NUM_layer {
            bindings = <

            &none       &kp N1      &kp N2      &kp N3      &trans

            &kp N0      &kp N4      &kp N5      &kp N6      &trans

            &none       &kp N7      &kp N8      &kp N9      &trans

                                                &trans      &trans
            >;
        };

        FN_layer {
            bindings = <

            &kp F1      &kp F1      &kp F3      &kp F4      &none

            &kp F5      &kp F6      &kp F7      &kp F8      &none

            &kp F9      &kp F10     &kp F11     &kp F12     &none

                                                &trans      &trans
            >;
        };

        SYS_layer {
            bindings = <

            &bt BT_CLR  &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3    &kp C_VOL_UP

            &none       &kp C_PREV  &kp C_PP    &kp C_NEXT  &kp C_VOL_DN

            &td_rsbl    &ext_power EP_OFF   &out OUT_TOG    &ext_power EP_ON    &kp C_MUTE

                                                &trans      &trans
            >;
        };

        LS_layer {
            bindings = <

            &to 2       &to 3       &to 4       &to 0       &to 5

            &sk LSHFT   &sk LGUI    &sk LALT    &sk LCTRL   &kp CAPS

            &none       &none       &none       &kp LGUI    &to 6

                                                &trans      &trans
            >;
        };
    };
};
